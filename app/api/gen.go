// Package api provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.5.0 DO NOT EDIT.
package api

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"errors"
	"fmt"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for OrderStatus.
const (
	OrderStatusCancelled OrderStatus = "cancelled"
	OrderStatusClosed    OrderStatus = "closed"
	OrderStatusOpen      OrderStatus = "open"
)

// Defines values for WsMenuChangedMessageEvent.
const (
	WsMenuChangedMessageEventMenuChanged WsMenuChangedMessageEvent = "menu_changed"
)

// Defines values for WsOrdersChangedMessageEvent.
const (
	WsOrdersChangedMessageEventOrdersChanged WsOrdersChangedMessageEvent = "orders_changed"
)

// AddProductGroupRequest defines model for AddProductGroupRequest.
type AddProductGroupRequest struct {
	Id     openapi_types.UUID `json:"id"`
	MenuId string             `json:"menuId"`
	Title  string             `json:"title"`
}

// AddProductRequest defines model for AddProductRequest.
type AddProductRequest struct {
	Available   bool               `json:"available"`
	Description string             `json:"description"`
	GroupId     openapi_types.UUID `json:"groupId"`
	Id          openapi_types.UUID `json:"id"`
	Price       float64            `json:"price"`
	Title       string             `json:"title"`
}

// EditProductGroupRequest defines model for EditProductGroupRequest.
type EditProductGroupRequest struct {
	Title string `json:"title"`
}

// EditProductRequest defines model for EditProductRequest.
type EditProductRequest struct {
	Available   bool    `json:"available"`
	Description string  `json:"description"`
	Price       float64 `json:"price"`
	Title       string  `json:"title"`
}

// General defines model for General.
type General struct {
	Error      bool   `json:"error"`
	Msg        string `json:"msg"`
	StatusCode int    `json:"statusCode,omitempty"`
}

// LoginRequest defines model for LoginRequest.
type LoginRequest struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

// LoginResponse defines model for LoginResponse.
type LoginResponse struct {
	Token string `json:"token"`
}

// MarkOrderSeenRequest defines model for MarkOrderSeenRequest.
type MarkOrderSeenRequest struct {
	Id openapi_types.UUID `json:"id"`
}

// Menu defines model for Menu.
type Menu struct {
	Groups []ProductGroup `json:"groups"`
	Id     string         `json:"id"`
	Title  string         `json:"title"`
}

// MenuResponse defines model for MenuResponse.
type MenuResponse struct {
	Menus []Menu `json:"menus"`
}

// NewOrderItem defines model for NewOrderItem.
type NewOrderItem struct {
	Amount int                `json:"amount"`
	Id     openapi_types.UUID `json:"id"`
}

// NewOrderRequest defines model for NewOrderRequest.
type NewOrderRequest struct {
	Comment *string            `json:"comment,omitempty"`
	Id      openapi_types.UUID `json:"id"`
	Items   []NewOrderItem     `json:"items"`
	Name    string             `json:"name"`
}

// Order defines model for Order.
type Order struct {
	ClientComment *string            `json:"clientComment,omitempty"`
	ClientName    string             `json:"clientName"`
	Created       time.Time          `json:"created"`
	Id            openapi_types.UUID `json:"id"`
	Index         int                `json:"index"`
	Items         []OrderItem        `json:"items"`
	Seen          bool               `json:"seen"`
	Status        OrderStatus        `json:"status"`
	TableID       *string            `json:"tableID,omitempty"`
}

// OrderItem defines model for OrderItem.
type OrderItem struct {
	Amount int                `json:"amount"`
	Id     openapi_types.UUID `json:"id"`
	Price  float64            `json:"price"`
	Title  string             `json:"title"`
}

// OrderStatus defines model for OrderStatus.
type OrderStatus string

// OrdersResponse defines model for OrdersResponse.
type OrdersResponse struct {
	Data       []Order `json:"data"`
	TotalCount int     `json:"totalCount"`
}

// Params defines model for Params.
type Params struct {
	HeaderDeadline *time.Time `json:"headerDeadline,omitempty"`
	HeaderText     *string    `json:"headerText,omitempty"`
}

// Product defines model for Product.
type Product struct {
	Available   bool               `json:"available"`
	Created     time.Time          `json:"created"`
	Description string             `json:"description"`
	Id          openapi_types.UUID `json:"id"`
	Index       int                `json:"index"`
	Price       float64            `json:"price"`
	Title       string             `json:"title"`
	Updated     time.Time          `json:"updated"`
}

// ProductGroup defines model for ProductGroup.
type ProductGroup struct {
	Created  time.Time          `json:"created"`
	Id       openapi_types.UUID `json:"id"`
	Products []Product          `json:"products"`
	Title    string             `json:"title"`
	Updated  time.Time          `json:"updated"`
}

// SetHeaderTextRequest defines model for SetHeaderTextRequest.
type SetHeaderTextRequest struct {
	Deadline *time.Time `json:"deadline,omitempty"`
	Text     *string    `json:"text,omitempty"`
}

// SetMenuOrderingRequest defines model for SetMenuOrderingRequest.
type SetMenuOrderingRequest struct {
	MenuId          string               `json:"menuId"`
	ProductGroupIds []openapi_types.UUID `json:"productGroupIds"`
}

// SetOrderStatusRequest defines model for SetOrderStatusRequest.
type SetOrderStatusRequest struct {
	Id     openapi_types.UUID `json:"id"`
	Status OrderStatus        `json:"status"`
}

// SetProductGroupOrderingRequest defines model for SetProductGroupOrderingRequest.
type SetProductGroupOrderingRequest struct {
	ProductGroupId openapi_types.UUID   `json:"productGroupId"`
	ProductIds     []openapi_types.UUID `json:"productIds"`
}

// WsMenuChangedMessage defines model for WsMenuChangedMessage.
type WsMenuChangedMessage struct {
	Event WsMenuChangedMessageEvent `json:"event"`
	Id    string                    `exhaustruct:"optional" json:"id"`
}

// WsMenuChangedMessageEvent defines model for WsMenuChangedMessage.Event.
type WsMenuChangedMessageEvent string

// WsMessage defines model for WsMessage.
type WsMessage struct {
	Event string `json:"event"`
	Id    string `exhaustruct:"optional" json:"id"`
	union json.RawMessage
}

// WsOrdersChangedMessage defines model for WsOrdersChangedMessage.
type WsOrdersChangedMessage struct {
	Event WsOrdersChangedMessageEvent `json:"event"`
	Id    string                      `exhaustruct:"optional" json:"id"`
}

// WsOrdersChangedMessageEvent defines model for WsOrdersChangedMessage.Event.
type WsOrdersChangedMessageEvent string

// GetOrdersParams defines parameters for GetOrders.
type GetOrdersParams struct {
	Offset *int `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LoginRequest

// SetMenuOrderingJSONRequestBody defines body for SetMenuOrdering for application/json ContentType.
type SetMenuOrderingJSONRequestBody = SetMenuOrderingRequest

// AddProductJSONRequestBody defines body for AddProduct for application/json ContentType.
type AddProductJSONRequestBody = AddProductRequest

// EditProductJSONRequestBody defines body for EditProduct for application/json ContentType.
type EditProductJSONRequestBody = EditProductRequest

// AddProductGroupJSONRequestBody defines body for AddProductGroup for application/json ContentType.
type AddProductGroupJSONRequestBody = AddProductGroupRequest

// SetProductGroupOrderingJSONRequestBody defines body for SetProductGroupOrdering for application/json ContentType.
type SetProductGroupOrderingJSONRequestBody = SetProductGroupOrderingRequest

// EditProductGroupJSONRequestBody defines body for EditProductGroup for application/json ContentType.
type EditProductGroupJSONRequestBody = EditProductGroupRequest

// CreateOrderJSONRequestBody defines body for CreateOrder for application/json ContentType.
type CreateOrderJSONRequestBody = NewOrderRequest

// MarkOrderSeenJSONRequestBody defines body for MarkOrderSeen for application/json ContentType.
type MarkOrderSeenJSONRequestBody = MarkOrderSeenRequest

// SetOrderStatusJSONRequestBody defines body for SetOrderStatus for application/json ContentType.
type SetOrderStatusJSONRequestBody = SetOrderStatusRequest

// SetHeaderTextJSONRequestBody defines body for SetHeaderText for application/json ContentType.
type SetHeaderTextJSONRequestBody = SetHeaderTextRequest

// AsWsOrdersChangedMessage returns the union data inside the WsMessage as a WsOrdersChangedMessage
func (t WsMessage) AsWsOrdersChangedMessage() (WsOrdersChangedMessage, error) {
	var body WsOrdersChangedMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWsOrdersChangedMessage overwrites any union data inside the WsMessage as the provided WsOrdersChangedMessage
func (t *WsMessage) FromWsOrdersChangedMessage(v WsOrdersChangedMessage) error {
	t.Event = "orders_changed"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWsOrdersChangedMessage performs a merge with any union data inside the WsMessage, using the provided WsOrdersChangedMessage
func (t *WsMessage) MergeWsOrdersChangedMessage(v WsOrdersChangedMessage) error {
	t.Event = "orders_changed"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

// AsWsMenuChangedMessage returns the union data inside the WsMessage as a WsMenuChangedMessage
func (t WsMessage) AsWsMenuChangedMessage() (WsMenuChangedMessage, error) {
	var body WsMenuChangedMessage
	err := json.Unmarshal(t.union, &body)
	return body, err
}

// FromWsMenuChangedMessage overwrites any union data inside the WsMessage as the provided WsMenuChangedMessage
func (t *WsMessage) FromWsMenuChangedMessage(v WsMenuChangedMessage) error {
	t.Event = "menu_changed"

	b, err := json.Marshal(v)
	t.union = b
	return err
}

// MergeWsMenuChangedMessage performs a merge with any union data inside the WsMessage, using the provided WsMenuChangedMessage
func (t *WsMessage) MergeWsMenuChangedMessage(v WsMenuChangedMessage) error {
	t.Event = "menu_changed"

	b, err := json.Marshal(v)
	if err != nil {
		return err
	}

	merged, err := runtime.JSONMerge(t.union, b)
	t.union = merged
	return err
}

func (t WsMessage) Discriminator() (string, error) {
	var discriminator struct {
		Discriminator string `json:"event"`
	}
	err := json.Unmarshal(t.union, &discriminator)
	return discriminator.Discriminator, err
}

func (t WsMessage) ValueByDiscriminator() (interface{}, error) {
	discriminator, err := t.Discriminator()
	if err != nil {
		return nil, err
	}
	switch discriminator {
	case "menu_changed":
		return t.AsWsMenuChangedMessage()
	case "orders_changed":
		return t.AsWsOrdersChangedMessage()
	default:
		return nil, errors.New("unknown discriminator value: " + discriminator)
	}
}

func (t WsMessage) MarshalJSON() ([]byte, error) {
	b, err := t.union.MarshalJSON()
	if err != nil {
		return nil, err
	}
	object := make(map[string]json.RawMessage)
	if t.union != nil {
		err = json.Unmarshal(b, &object)
		if err != nil {
			return nil, err
		}
	}

	object["event"], err = json.Marshal(t.Event)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'event': %w", err)
	}

	object["id"], err = json.Marshal(t.Id)
	if err != nil {
		return nil, fmt.Errorf("error marshaling 'id': %w", err)
	}

	b, err = json.Marshal(object)
	return b, err
}

func (t *WsMessage) UnmarshalJSON(b []byte) error {
	err := t.union.UnmarshalJSON(b)
	if err != nil {
		return err
	}
	object := make(map[string]json.RawMessage)
	err = json.Unmarshal(b, &object)
	if err != nil {
		return err
	}

	if raw, found := object["event"]; found {
		err = json.Unmarshal(raw, &t.Event)
		if err != nil {
			return fmt.Errorf("error reading 'event': %w", err)
		}
	}

	if raw, found := object["id"]; found {
		err = json.Unmarshal(raw, &t.Id)
		if err != nil {
			return fmt.Errorf("error reading 'id': %w", err)
		}
	}

	return err
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Health check
	// (GET /healthz)
	HealthCheck(c *fiber.Ctx) error
	// Login
	// (POST /login)
	Login(c *fiber.Ctx) error
	// Get site menu
	// (GET /menu)
	GetMenu(c *fiber.Ctx) error
	// Set menu ordering
	// (POST /menu/ordering)
	SetMenuOrdering(c *fiber.Ctx) error
	// Add product
	// (POST /menu/product)
	AddProduct(c *fiber.Ctx) error
	// Delete product
	// (DELETE /menu/product/{productId})
	DeleteProduct(c *fiber.Ctx, productId openapi_types.UUID) error
	// Edit product
	// (PUT /menu/product/{productId})
	EditProduct(c *fiber.Ctx, productId openapi_types.UUID) error
	// Add product group
	// (POST /menu/productGroup)
	AddProductGroup(c *fiber.Ctx) error
	// Set product group ordering
	// (POST /menu/productGroup/ordering)
	SetProductGroupOrdering(c *fiber.Ctx) error
	// Delete product group
	// (DELETE /menu/productGroup/{productGroupId})
	DeleteProductGroup(c *fiber.Ctx, productGroupId openapi_types.UUID) error
	// Edit product group
	// (PUT /menu/productGroup/{productGroupId})
	EditProductGroup(c *fiber.Ctx, productGroupId openapi_types.UUID) error
	// Create new order
	// (POST /order)
	CreateOrder(c *fiber.Ctx) error
	// Mark order as seen
	// (POST /order/seen)
	MarkOrderSeen(c *fiber.Ctx) error
	// Set order status
	// (POST /order/setStatus)
	SetOrderStatus(c *fiber.Ctx) error
	// Delete order
	// (DELETE /order/{id})
	DeleteOrder(c *fiber.Ctx, id openapi_types.UUID) error
	// Get order by ID
	// (GET /order/{id})
	GetOrder(c *fiber.Ctx, id openapi_types.UUID) error
	// Get paginated orders
	// (GET /orders)
	GetOrders(c *fiber.Ctx, params GetOrdersParams) error
	// Get params
	// (GET /params)
	GetParams(c *fiber.Ctx) error
	// Set header text
	// (POST /params/setHeaderText)
	SetHeaderText(c *fiber.Ctx) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

type MiddlewareFunc fiber.Handler

// HealthCheck operation middleware
func (siw *ServerInterfaceWrapper) HealthCheck(c *fiber.Ctx) error {

	return siw.Handler.HealthCheck(c)
}

// Login operation middleware
func (siw *ServerInterfaceWrapper) Login(c *fiber.Ctx) error {

	return siw.Handler.Login(c)
}

// GetMenu operation middleware
func (siw *ServerInterfaceWrapper) GetMenu(c *fiber.Ctx) error {

	return siw.Handler.GetMenu(c)
}

// SetMenuOrdering operation middleware
func (siw *ServerInterfaceWrapper) SetMenuOrdering(c *fiber.Ctx) error {

	return siw.Handler.SetMenuOrdering(c)
}

// AddProduct operation middleware
func (siw *ServerInterfaceWrapper) AddProduct(c *fiber.Ctx) error {

	return siw.Handler.AddProduct(c)
}

// DeleteProduct operation middleware
func (siw *ServerInterfaceWrapper) DeleteProduct(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "productId", c.Params("productId"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter productId: %w", err).Error())
	}

	return siw.Handler.DeleteProduct(c, productId)
}

// EditProduct operation middleware
func (siw *ServerInterfaceWrapper) EditProduct(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "productId", c.Params("productId"), &productId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter productId: %w", err).Error())
	}

	return siw.Handler.EditProduct(c, productId)
}

// AddProductGroup operation middleware
func (siw *ServerInterfaceWrapper) AddProductGroup(c *fiber.Ctx) error {

	return siw.Handler.AddProductGroup(c)
}

// SetProductGroupOrdering operation middleware
func (siw *ServerInterfaceWrapper) SetProductGroupOrdering(c *fiber.Ctx) error {

	return siw.Handler.SetProductGroupOrdering(c)
}

// DeleteProductGroup operation middleware
func (siw *ServerInterfaceWrapper) DeleteProductGroup(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "productGroupId" -------------
	var productGroupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "productGroupId", c.Params("productGroupId"), &productGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter productGroupId: %w", err).Error())
	}

	return siw.Handler.DeleteProductGroup(c, productGroupId)
}

// EditProductGroup operation middleware
func (siw *ServerInterfaceWrapper) EditProductGroup(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "productGroupId" -------------
	var productGroupId openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "productGroupId", c.Params("productGroupId"), &productGroupId, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter productGroupId: %w", err).Error())
	}

	return siw.Handler.EditProductGroup(c, productGroupId)
}

// CreateOrder operation middleware
func (siw *ServerInterfaceWrapper) CreateOrder(c *fiber.Ctx) error {

	return siw.Handler.CreateOrder(c)
}

// MarkOrderSeen operation middleware
func (siw *ServerInterfaceWrapper) MarkOrderSeen(c *fiber.Ctx) error {

	return siw.Handler.MarkOrderSeen(c)
}

// SetOrderStatus operation middleware
func (siw *ServerInterfaceWrapper) SetOrderStatus(c *fiber.Ctx) error {

	return siw.Handler.SetOrderStatus(c)
}

// DeleteOrder operation middleware
func (siw *ServerInterfaceWrapper) DeleteOrder(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.DeleteOrder(c, id)
}

// GetOrder operation middleware
func (siw *ServerInterfaceWrapper) GetOrder(c *fiber.Ctx) error {

	var err error

	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithOptions("simple", "id", c.Params("id"), &id, runtime.BindStyledParameterOptions{Explode: false, Required: true})
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter id: %w", err).Error())
	}

	return siw.Handler.GetOrder(c, id)
}

// GetOrders operation middleware
func (siw *ServerInterfaceWrapper) GetOrders(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetOrdersParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", query, &params.Offset)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter offset: %w", err).Error())
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", query, &params.Limit)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter limit: %w", err).Error())
	}

	return siw.Handler.GetOrders(c, params)
}

// GetParams operation middleware
func (siw *ServerInterfaceWrapper) GetParams(c *fiber.Ctx) error {

	return siw.Handler.GetParams(c)
}

// SetHeaderText operation middleware
func (siw *ServerInterfaceWrapper) SetHeaderText(c *fiber.Ctx) error {

	return siw.Handler.SetHeaderText(c)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middlewares []MiddlewareFunc
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	for _, m := range options.Middlewares {
		router.Use(fiber.Handler(m))
	}

	router.Get(options.BaseURL+"/healthz", wrapper.HealthCheck)

	router.Post(options.BaseURL+"/login", wrapper.Login)

	router.Get(options.BaseURL+"/menu", wrapper.GetMenu)

	router.Post(options.BaseURL+"/menu/ordering", wrapper.SetMenuOrdering)

	router.Post(options.BaseURL+"/menu/product", wrapper.AddProduct)

	router.Delete(options.BaseURL+"/menu/product/:productId", wrapper.DeleteProduct)

	router.Put(options.BaseURL+"/menu/product/:productId", wrapper.EditProduct)

	router.Post(options.BaseURL+"/menu/productGroup", wrapper.AddProductGroup)

	router.Post(options.BaseURL+"/menu/productGroup/ordering", wrapper.SetProductGroupOrdering)

	router.Delete(options.BaseURL+"/menu/productGroup/:productGroupId", wrapper.DeleteProductGroup)

	router.Put(options.BaseURL+"/menu/productGroup/:productGroupId", wrapper.EditProductGroup)

	router.Post(options.BaseURL+"/order", wrapper.CreateOrder)

	router.Post(options.BaseURL+"/order/seen", wrapper.MarkOrderSeen)

	router.Post(options.BaseURL+"/order/setStatus", wrapper.SetOrderStatus)

	router.Delete(options.BaseURL+"/order/:id", wrapper.DeleteOrder)

	router.Get(options.BaseURL+"/order/:id", wrapper.GetOrder)

	router.Get(options.BaseURL+"/orders", wrapper.GetOrders)

	router.Get(options.BaseURL+"/params", wrapper.GetParams)

	router.Post(options.BaseURL+"/params/setHeaderText", wrapper.SetHeaderText)

}

type HealthCheckRequestObject struct {
}

type HealthCheckResponseObject interface {
	VisitHealthCheckResponse(ctx *fiber.Ctx) error
}

type HealthCheck200Response struct {
}

func (response HealthCheck200Response) VisitHealthCheckResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type HealthCheck500JSONResponse General

func (response HealthCheck500JSONResponse) VisitHealthCheckResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type LoginRequestObject struct {
	Body *LoginJSONRequestBody
}

type LoginResponseObject interface {
	VisitLoginResponse(ctx *fiber.Ctx) error
}

type Login200JSONResponse LoginResponse

func (response Login200JSONResponse) VisitLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type Login400JSONResponse General

func (response Login400JSONResponse) VisitLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type Login401JSONResponse General

func (response Login401JSONResponse) VisitLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type Login500JSONResponse General

func (response Login500JSONResponse) VisitLoginResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetMenuRequestObject struct {
}

type GetMenuResponseObject interface {
	VisitGetMenuResponse(ctx *fiber.Ctx) error
}

type GetMenu200JSONResponse MenuResponse

func (response GetMenu200JSONResponse) VisitGetMenuResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetMenu400JSONResponse General

func (response GetMenu400JSONResponse) VisitGetMenuResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetMenu401JSONResponse General

func (response GetMenu401JSONResponse) VisitGetMenuResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetMenu404JSONResponse General

func (response GetMenu404JSONResponse) VisitGetMenuResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetMenu500JSONResponse General

func (response GetMenu500JSONResponse) VisitGetMenuResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type SetMenuOrderingRequestObject struct {
	Body *SetMenuOrderingJSONRequestBody
}

type SetMenuOrderingResponseObject interface {
	VisitSetMenuOrderingResponse(ctx *fiber.Ctx) error
}

type SetMenuOrdering200Response struct {
}

func (response SetMenuOrdering200Response) VisitSetMenuOrderingResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type SetMenuOrdering400JSONResponse General

func (response SetMenuOrdering400JSONResponse) VisitSetMenuOrderingResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type SetMenuOrdering401JSONResponse General

func (response SetMenuOrdering401JSONResponse) VisitSetMenuOrderingResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type SetMenuOrdering404JSONResponse General

func (response SetMenuOrdering404JSONResponse) VisitSetMenuOrderingResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type SetMenuOrdering500JSONResponse General

func (response SetMenuOrdering500JSONResponse) VisitSetMenuOrderingResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AddProductRequestObject struct {
	Body *AddProductJSONRequestBody
}

type AddProductResponseObject interface {
	VisitAddProductResponse(ctx *fiber.Ctx) error
}

type AddProduct200Response struct {
}

func (response AddProduct200Response) VisitAddProductResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type AddProduct400JSONResponse General

func (response AddProduct400JSONResponse) VisitAddProductResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type AddProduct401JSONResponse General

func (response AddProduct401JSONResponse) VisitAddProductResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type AddProduct404JSONResponse General

func (response AddProduct404JSONResponse) VisitAddProductResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type AddProduct500JSONResponse General

func (response AddProduct500JSONResponse) VisitAddProductResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteProductRequestObject struct {
	ProductId openapi_types.UUID `json:"productId"`
}

type DeleteProductResponseObject interface {
	VisitDeleteProductResponse(ctx *fiber.Ctx) error
}

type DeleteProduct200Response struct {
}

func (response DeleteProduct200Response) VisitDeleteProductResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type DeleteProduct400JSONResponse General

func (response DeleteProduct400JSONResponse) VisitDeleteProductResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type DeleteProduct401JSONResponse General

func (response DeleteProduct401JSONResponse) VisitDeleteProductResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type DeleteProduct404JSONResponse General

func (response DeleteProduct404JSONResponse) VisitDeleteProductResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteProduct500JSONResponse General

func (response DeleteProduct500JSONResponse) VisitDeleteProductResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type EditProductRequestObject struct {
	ProductId openapi_types.UUID `json:"productId"`
	Body      *EditProductJSONRequestBody
}

type EditProductResponseObject interface {
	VisitEditProductResponse(ctx *fiber.Ctx) error
}

type EditProduct200Response struct {
}

func (response EditProduct200Response) VisitEditProductResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type EditProduct400JSONResponse General

func (response EditProduct400JSONResponse) VisitEditProductResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type EditProduct401JSONResponse General

func (response EditProduct401JSONResponse) VisitEditProductResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type EditProduct404JSONResponse General

func (response EditProduct404JSONResponse) VisitEditProductResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type EditProduct500JSONResponse General

func (response EditProduct500JSONResponse) VisitEditProductResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type AddProductGroupRequestObject struct {
	Body *AddProductGroupJSONRequestBody
}

type AddProductGroupResponseObject interface {
	VisitAddProductGroupResponse(ctx *fiber.Ctx) error
}

type AddProductGroup200Response struct {
}

func (response AddProductGroup200Response) VisitAddProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type AddProductGroup400JSONResponse General

func (response AddProductGroup400JSONResponse) VisitAddProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type AddProductGroup401JSONResponse General

func (response AddProductGroup401JSONResponse) VisitAddProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type AddProductGroup404JSONResponse General

func (response AddProductGroup404JSONResponse) VisitAddProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type AddProductGroup500JSONResponse General

func (response AddProductGroup500JSONResponse) VisitAddProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type SetProductGroupOrderingRequestObject struct {
	Body *SetProductGroupOrderingJSONRequestBody
}

type SetProductGroupOrderingResponseObject interface {
	VisitSetProductGroupOrderingResponse(ctx *fiber.Ctx) error
}

type SetProductGroupOrdering200Response struct {
}

func (response SetProductGroupOrdering200Response) VisitSetProductGroupOrderingResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type SetProductGroupOrdering400JSONResponse General

func (response SetProductGroupOrdering400JSONResponse) VisitSetProductGroupOrderingResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type SetProductGroupOrdering401JSONResponse General

func (response SetProductGroupOrdering401JSONResponse) VisitSetProductGroupOrderingResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type SetProductGroupOrdering404JSONResponse General

func (response SetProductGroupOrdering404JSONResponse) VisitSetProductGroupOrderingResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type SetProductGroupOrdering500JSONResponse General

func (response SetProductGroupOrdering500JSONResponse) VisitSetProductGroupOrderingResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteProductGroupRequestObject struct {
	ProductGroupId openapi_types.UUID `json:"productGroupId"`
}

type DeleteProductGroupResponseObject interface {
	VisitDeleteProductGroupResponse(ctx *fiber.Ctx) error
}

type DeleteProductGroup200Response struct {
}

func (response DeleteProductGroup200Response) VisitDeleteProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type DeleteProductGroup400JSONResponse General

func (response DeleteProductGroup400JSONResponse) VisitDeleteProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type DeleteProductGroup401JSONResponse General

func (response DeleteProductGroup401JSONResponse) VisitDeleteProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type DeleteProductGroup404JSONResponse General

func (response DeleteProductGroup404JSONResponse) VisitDeleteProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteProductGroup500JSONResponse General

func (response DeleteProductGroup500JSONResponse) VisitDeleteProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type EditProductGroupRequestObject struct {
	ProductGroupId openapi_types.UUID `json:"productGroupId"`
	Body           *EditProductGroupJSONRequestBody
}

type EditProductGroupResponseObject interface {
	VisitEditProductGroupResponse(ctx *fiber.Ctx) error
}

type EditProductGroup200Response struct {
}

func (response EditProductGroup200Response) VisitEditProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type EditProductGroup400JSONResponse General

func (response EditProductGroup400JSONResponse) VisitEditProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type EditProductGroup401JSONResponse General

func (response EditProductGroup401JSONResponse) VisitEditProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type EditProductGroup404JSONResponse General

func (response EditProductGroup404JSONResponse) VisitEditProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type EditProductGroup500JSONResponse General

func (response EditProductGroup500JSONResponse) VisitEditProductGroupResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type CreateOrderRequestObject struct {
	Body *CreateOrderJSONRequestBody
}

type CreateOrderResponseObject interface {
	VisitCreateOrderResponse(ctx *fiber.Ctx) error
}

type CreateOrder200Response struct {
}

func (response CreateOrder200Response) VisitCreateOrderResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type CreateOrder400JSONResponse General

func (response CreateOrder400JSONResponse) VisitCreateOrderResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type CreateOrder401JSONResponse General

func (response CreateOrder401JSONResponse) VisitCreateOrderResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type CreateOrder500JSONResponse General

func (response CreateOrder500JSONResponse) VisitCreateOrderResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type MarkOrderSeenRequestObject struct {
	Body *MarkOrderSeenJSONRequestBody
}

type MarkOrderSeenResponseObject interface {
	VisitMarkOrderSeenResponse(ctx *fiber.Ctx) error
}

type MarkOrderSeen200Response struct {
}

func (response MarkOrderSeen200Response) VisitMarkOrderSeenResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type MarkOrderSeen400JSONResponse General

func (response MarkOrderSeen400JSONResponse) VisitMarkOrderSeenResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type MarkOrderSeen401JSONResponse General

func (response MarkOrderSeen401JSONResponse) VisitMarkOrderSeenResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type MarkOrderSeen500JSONResponse General

func (response MarkOrderSeen500JSONResponse) VisitMarkOrderSeenResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type SetOrderStatusRequestObject struct {
	Body *SetOrderStatusJSONRequestBody
}

type SetOrderStatusResponseObject interface {
	VisitSetOrderStatusResponse(ctx *fiber.Ctx) error
}

type SetOrderStatus200Response struct {
}

func (response SetOrderStatus200Response) VisitSetOrderStatusResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type SetOrderStatus400JSONResponse General

func (response SetOrderStatus400JSONResponse) VisitSetOrderStatusResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type SetOrderStatus401JSONResponse General

func (response SetOrderStatus401JSONResponse) VisitSetOrderStatusResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type SetOrderStatus500JSONResponse General

func (response SetOrderStatus500JSONResponse) VisitSetOrderStatusResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type DeleteOrderRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type DeleteOrderResponseObject interface {
	VisitDeleteOrderResponse(ctx *fiber.Ctx) error
}

type DeleteOrder200Response struct {
}

func (response DeleteOrder200Response) VisitDeleteOrderResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type DeleteOrder400JSONResponse General

func (response DeleteOrder400JSONResponse) VisitDeleteOrderResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type DeleteOrder401JSONResponse General

func (response DeleteOrder401JSONResponse) VisitDeleteOrderResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type DeleteOrder404JSONResponse General

func (response DeleteOrder404JSONResponse) VisitDeleteOrderResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type DeleteOrder500JSONResponse General

func (response DeleteOrder500JSONResponse) VisitDeleteOrderResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetOrderRequestObject struct {
	Id openapi_types.UUID `json:"id"`
}

type GetOrderResponseObject interface {
	VisitGetOrderResponse(ctx *fiber.Ctx) error
}

type GetOrder200JSONResponse Order

func (response GetOrder200JSONResponse) VisitGetOrderResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetOrder400JSONResponse General

func (response GetOrder400JSONResponse) VisitGetOrderResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetOrder401JSONResponse General

func (response GetOrder401JSONResponse) VisitGetOrderResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetOrder404JSONResponse General

func (response GetOrder404JSONResponse) VisitGetOrderResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetOrder500JSONResponse General

func (response GetOrder500JSONResponse) VisitGetOrderResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetOrdersRequestObject struct {
	Params GetOrdersParams
}

type GetOrdersResponseObject interface {
	VisitGetOrdersResponse(ctx *fiber.Ctx) error
}

type GetOrders200JSONResponse OrdersResponse

func (response GetOrders200JSONResponse) VisitGetOrdersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetOrders400JSONResponse General

func (response GetOrders400JSONResponse) VisitGetOrdersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetOrders401JSONResponse General

func (response GetOrders401JSONResponse) VisitGetOrdersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetOrders404JSONResponse General

func (response GetOrders404JSONResponse) VisitGetOrdersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetOrders500JSONResponse General

func (response GetOrders500JSONResponse) VisitGetOrdersResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type GetParamsRequestObject struct {
}

type GetParamsResponseObject interface {
	VisitGetParamsResponse(ctx *fiber.Ctx) error
}

type GetParams200JSONResponse Params

func (response GetParams200JSONResponse) VisitGetParamsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(200)

	return ctx.JSON(&response)
}

type GetParams400JSONResponse General

func (response GetParams400JSONResponse) VisitGetParamsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type GetParams401JSONResponse General

func (response GetParams401JSONResponse) VisitGetParamsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type GetParams404JSONResponse General

func (response GetParams404JSONResponse) VisitGetParamsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(404)

	return ctx.JSON(&response)
}

type GetParams500JSONResponse General

func (response GetParams500JSONResponse) VisitGetParamsResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

type SetHeaderTextRequestObject struct {
	Body *SetHeaderTextJSONRequestBody
}

type SetHeaderTextResponseObject interface {
	VisitSetHeaderTextResponse(ctx *fiber.Ctx) error
}

type SetHeaderText200Response struct {
}

func (response SetHeaderText200Response) VisitSetHeaderTextResponse(ctx *fiber.Ctx) error {
	ctx.Status(200)
	return nil
}

type SetHeaderText400JSONResponse General

func (response SetHeaderText400JSONResponse) VisitSetHeaderTextResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(400)

	return ctx.JSON(&response)
}

type SetHeaderText401JSONResponse General

func (response SetHeaderText401JSONResponse) VisitSetHeaderTextResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(401)

	return ctx.JSON(&response)
}

type SetHeaderText500JSONResponse General

func (response SetHeaderText500JSONResponse) VisitSetHeaderTextResponse(ctx *fiber.Ctx) error {
	ctx.Response().Header.Set("Content-Type", "application/json")
	ctx.Status(500)

	return ctx.JSON(&response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Health check
	// (GET /healthz)
	HealthCheck(ctx context.Context, request HealthCheckRequestObject) (HealthCheckResponseObject, error)
	// Login
	// (POST /login)
	Login(ctx context.Context, request LoginRequestObject) (LoginResponseObject, error)
	// Get site menu
	// (GET /menu)
	GetMenu(ctx context.Context, request GetMenuRequestObject) (GetMenuResponseObject, error)
	// Set menu ordering
	// (POST /menu/ordering)
	SetMenuOrdering(ctx context.Context, request SetMenuOrderingRequestObject) (SetMenuOrderingResponseObject, error)
	// Add product
	// (POST /menu/product)
	AddProduct(ctx context.Context, request AddProductRequestObject) (AddProductResponseObject, error)
	// Delete product
	// (DELETE /menu/product/{productId})
	DeleteProduct(ctx context.Context, request DeleteProductRequestObject) (DeleteProductResponseObject, error)
	// Edit product
	// (PUT /menu/product/{productId})
	EditProduct(ctx context.Context, request EditProductRequestObject) (EditProductResponseObject, error)
	// Add product group
	// (POST /menu/productGroup)
	AddProductGroup(ctx context.Context, request AddProductGroupRequestObject) (AddProductGroupResponseObject, error)
	// Set product group ordering
	// (POST /menu/productGroup/ordering)
	SetProductGroupOrdering(ctx context.Context, request SetProductGroupOrderingRequestObject) (SetProductGroupOrderingResponseObject, error)
	// Delete product group
	// (DELETE /menu/productGroup/{productGroupId})
	DeleteProductGroup(ctx context.Context, request DeleteProductGroupRequestObject) (DeleteProductGroupResponseObject, error)
	// Edit product group
	// (PUT /menu/productGroup/{productGroupId})
	EditProductGroup(ctx context.Context, request EditProductGroupRequestObject) (EditProductGroupResponseObject, error)
	// Create new order
	// (POST /order)
	CreateOrder(ctx context.Context, request CreateOrderRequestObject) (CreateOrderResponseObject, error)
	// Mark order as seen
	// (POST /order/seen)
	MarkOrderSeen(ctx context.Context, request MarkOrderSeenRequestObject) (MarkOrderSeenResponseObject, error)
	// Set order status
	// (POST /order/setStatus)
	SetOrderStatus(ctx context.Context, request SetOrderStatusRequestObject) (SetOrderStatusResponseObject, error)
	// Delete order
	// (DELETE /order/{id})
	DeleteOrder(ctx context.Context, request DeleteOrderRequestObject) (DeleteOrderResponseObject, error)
	// Get order by ID
	// (GET /order/{id})
	GetOrder(ctx context.Context, request GetOrderRequestObject) (GetOrderResponseObject, error)
	// Get paginated orders
	// (GET /orders)
	GetOrders(ctx context.Context, request GetOrdersRequestObject) (GetOrdersResponseObject, error)
	// Get params
	// (GET /params)
	GetParams(ctx context.Context, request GetParamsRequestObject) (GetParamsResponseObject, error)
	// Set header text
	// (POST /params/setHeaderText)
	SetHeaderText(ctx context.Context, request SetHeaderTextRequestObject) (SetHeaderTextResponseObject, error)
}

type StrictHandlerFunc func(ctx *fiber.Ctx, args interface{}) (interface{}, error)

type StrictMiddlewareFunc func(f StrictHandlerFunc, operationID string) StrictHandlerFunc

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
}

// HealthCheck operation middleware
func (sh *strictHandler) HealthCheck(ctx *fiber.Ctx) error {
	var request HealthCheckRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.HealthCheck(ctx.UserContext(), request.(HealthCheckRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "HealthCheck")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(HealthCheckResponseObject); ok {
		if err := validResponse.VisitHealthCheckResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Login operation middleware
func (sh *strictHandler) Login(ctx *fiber.Ctx) error {
	var request LoginRequestObject

	var body LoginJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.Login(ctx.UserContext(), request.(LoginRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "Login")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(LoginResponseObject); ok {
		if err := validResponse.VisitLoginResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetMenu operation middleware
func (sh *strictHandler) GetMenu(ctx *fiber.Ctx) error {
	var request GetMenuRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetMenu(ctx.UserContext(), request.(GetMenuRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMenu")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetMenuResponseObject); ok {
		if err := validResponse.VisitGetMenuResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SetMenuOrdering operation middleware
func (sh *strictHandler) SetMenuOrdering(ctx *fiber.Ctx) error {
	var request SetMenuOrderingRequestObject

	var body SetMenuOrderingJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.SetMenuOrdering(ctx.UserContext(), request.(SetMenuOrderingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetMenuOrdering")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetMenuOrderingResponseObject); ok {
		if err := validResponse.VisitSetMenuOrderingResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddProduct operation middleware
func (sh *strictHandler) AddProduct(ctx *fiber.Ctx) error {
	var request AddProductRequestObject

	var body AddProductJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AddProduct(ctx.UserContext(), request.(AddProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddProduct")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddProductResponseObject); ok {
		if err := validResponse.VisitAddProductResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteProduct operation middleware
func (sh *strictHandler) DeleteProduct(ctx *fiber.Ctx, productId openapi_types.UUID) error {
	var request DeleteProductRequestObject

	request.ProductId = productId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProduct(ctx.UserContext(), request.(DeleteProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProduct")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteProductResponseObject); ok {
		if err := validResponse.VisitDeleteProductResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// EditProduct operation middleware
func (sh *strictHandler) EditProduct(ctx *fiber.Ctx, productId openapi_types.UUID) error {
	var request EditProductRequestObject

	request.ProductId = productId

	var body EditProductJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.EditProduct(ctx.UserContext(), request.(EditProductRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EditProduct")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EditProductResponseObject); ok {
		if err := validResponse.VisitEditProductResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// AddProductGroup operation middleware
func (sh *strictHandler) AddProductGroup(ctx *fiber.Ctx) error {
	var request AddProductGroupRequestObject

	var body AddProductGroupJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.AddProductGroup(ctx.UserContext(), request.(AddProductGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "AddProductGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(AddProductGroupResponseObject); ok {
		if err := validResponse.VisitAddProductGroupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SetProductGroupOrdering operation middleware
func (sh *strictHandler) SetProductGroupOrdering(ctx *fiber.Ctx) error {
	var request SetProductGroupOrderingRequestObject

	var body SetProductGroupOrderingJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.SetProductGroupOrdering(ctx.UserContext(), request.(SetProductGroupOrderingRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetProductGroupOrdering")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetProductGroupOrderingResponseObject); ok {
		if err := validResponse.VisitSetProductGroupOrderingResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteProductGroup operation middleware
func (sh *strictHandler) DeleteProductGroup(ctx *fiber.Ctx, productGroupId openapi_types.UUID) error {
	var request DeleteProductGroupRequestObject

	request.ProductGroupId = productGroupId

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteProductGroup(ctx.UserContext(), request.(DeleteProductGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteProductGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteProductGroupResponseObject); ok {
		if err := validResponse.VisitDeleteProductGroupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// EditProductGroup operation middleware
func (sh *strictHandler) EditProductGroup(ctx *fiber.Ctx, productGroupId openapi_types.UUID) error {
	var request EditProductGroupRequestObject

	request.ProductGroupId = productGroupId

	var body EditProductGroupJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.EditProductGroup(ctx.UserContext(), request.(EditProductGroupRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "EditProductGroup")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(EditProductGroupResponseObject); ok {
		if err := validResponse.VisitEditProductGroupResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// CreateOrder operation middleware
func (sh *strictHandler) CreateOrder(ctx *fiber.Ctx) error {
	var request CreateOrderRequestObject

	var body CreateOrderJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.CreateOrder(ctx.UserContext(), request.(CreateOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(CreateOrderResponseObject); ok {
		if err := validResponse.VisitCreateOrderResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// MarkOrderSeen operation middleware
func (sh *strictHandler) MarkOrderSeen(ctx *fiber.Ctx) error {
	var request MarkOrderSeenRequestObject

	var body MarkOrderSeenJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.MarkOrderSeen(ctx.UserContext(), request.(MarkOrderSeenRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "MarkOrderSeen")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(MarkOrderSeenResponseObject); ok {
		if err := validResponse.VisitMarkOrderSeenResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SetOrderStatus operation middleware
func (sh *strictHandler) SetOrderStatus(ctx *fiber.Ctx) error {
	var request SetOrderStatusRequestObject

	var body SetOrderStatusJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.SetOrderStatus(ctx.UserContext(), request.(SetOrderStatusRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetOrderStatus")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetOrderStatusResponseObject); ok {
		if err := validResponse.VisitSetOrderStatusResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// DeleteOrder operation middleware
func (sh *strictHandler) DeleteOrder(ctx *fiber.Ctx, id openapi_types.UUID) error {
	var request DeleteOrderRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteOrder(ctx.UserContext(), request.(DeleteOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(DeleteOrderResponseObject); ok {
		if err := validResponse.VisitDeleteOrderResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOrder operation middleware
func (sh *strictHandler) GetOrder(ctx *fiber.Ctx, id openapi_types.UUID) error {
	var request GetOrderRequestObject

	request.Id = id

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrder(ctx.UserContext(), request.(GetOrderRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrder")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOrderResponseObject); ok {
		if err := validResponse.VisitGetOrderResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetOrders operation middleware
func (sh *strictHandler) GetOrders(ctx *fiber.Ctx, params GetOrdersParams) error {
	var request GetOrdersRequestObject

	request.Params = params

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetOrders(ctx.UserContext(), request.(GetOrdersRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetOrders")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetOrdersResponseObject); ok {
		if err := validResponse.VisitGetOrdersResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// GetParams operation middleware
func (sh *strictHandler) GetParams(ctx *fiber.Ctx) error {
	var request GetParamsRequestObject

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.GetParams(ctx.UserContext(), request.(GetParamsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetParams")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(GetParamsResponseObject); ok {
		if err := validResponse.VisitGetParamsResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// SetHeaderText operation middleware
func (sh *strictHandler) SetHeaderText(ctx *fiber.Ctx) error {
	var request SetHeaderTextRequestObject

	var body SetHeaderTextJSONRequestBody
	if err := ctx.BodyParser(&body); err != nil {
		return fiber.NewError(fiber.StatusBadRequest, err.Error())
	}
	request.Body = &body

	handler := func(ctx *fiber.Ctx, request interface{}) (interface{}, error) {
		return sh.ssi.SetHeaderText(ctx.UserContext(), request.(SetHeaderTextRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "SetHeaderText")
	}

	response, err := handler(ctx, request)

	if err != nil {
		return err
	} else if validResponse, ok := response.(SetHeaderTextResponseObject); ok {
		if err := validResponse.VisitSetHeaderTextResponse(ctx); err != nil {
			return fiber.NewError(fiber.StatusBadRequest, err.Error())
		}
	} else if response != nil {
		return fmt.Errorf("unexpected response type: %T", response)
	}
	return nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xb3W/bNhD/VwRuj0rsbNmL39qkSw2sH5g37KEIBkY822wlUiWpNG7g/33gUZ82Zctx",
	"VBiLXoqgJu/zd8c76vhIIpmkUoAwmkweiY6WkFD88xVjH5VkWWRulMzSP+FrBtrYX1IlU1CGA67jzP47",
	"lyqhhkxIlnFGQmJWKZAJ0UZxsSDrkCQgsiku3frJcBOD55d1SBR8zbgCRiafCNLNyRSbbktO8u4zRMaS",
	"qwRvlZneUx7TuwbXOyljoMJSYKAjxVPDpfAKvLAGmXbTu6N5UsUjaKxkMrMChiThgidZQibjcp/IkjtQ",
	"h9quELvY1VS0kCGsWcdn3jeMm07A6ChauyNrnPryZM9mP8bONyBA0XhbZVBKKr+6iV541dSGmkxfSVaX",
	"mQsDC1AkJA9nMuEGktSsyMSoDDb1cCwd/QY1n+B/yAUXrQ5LqdbfpPJngkyDEjTpYNlyZVhR3CGMTqXQ",
	"4MGo/AKigx9xmY/+O6q+fFAM1AxAHJcjt0PWyxBEts0AQ9uxMpDgHz8rmJMJ+WlUZfhRnt5H9fhFODsu",
	"VCm6qpLWUYm6gH4uWZsq7a6xmb67RmiWLU02BHMkfaK8h2/oxamBxJNkEpkJdGuZFC7CzTDqmut9xsoZ",
	"7JKsFVuRTBJw0j318Ckt3MnUDVt5wNMtgFGSPIIdW5/2yMijc8xBmKsdmrsV7/2ihCRSQA00rcOogTPD",
	"UaInW1IwePDk2IONvNPCGhpJq3YAuNTcifjMLbXk7Rk0ve7oM6diZcKSacPouZB7fbsv4J4YZDtP9qOK",
	"qCKvlYd4e+jWzWzPbWETxyciUzRMFEuN5ouoiCCOoZ7vKz2QiG5Pk4waehiqfIgy0tD4qs3oG3ZAlo09",
	"Pu0/UkWdRE2Bl0AZqGugLOYCukeg2/cXPBi/p7YFcIfcwTXjwblhX5F5fO54DjCHJEvZIYrtCv6NNmx/",
	"hVvPF4Uct+1Oc5XJdt7vKW2njuvBBZQ3lPq0/5bdS8m7GngG5m0ZSa1FBTs4PE33wJyBseUaJiMuFq1C",
	"7LgySGswmbKm3/Z6e2+NiBbeZNFizFqSP/aK5AmHtw8jOZkWeesBttcDTRscEkrP65QNORpcfHr+oy3A",
	"rpZULIC9A63pwnN0wn1ePRYns/X9v5Hb5T2MfX0Rts805WeRZLAAcQYPRtEzQxeOycOSZtooPImIxAxJ",
	"Y7LearFRmLCt7bMalWowbpNtwgU17iYgoWlqZcmDptShBUJe84REYqmxf7MrSTa2O9db665c1Z1rtA6J",
	"FPBhTiafduO6le6+bR5d1rdhm69PyqdejffjdMNRp4TUNRYyc+k6U2GoK8BcT0hmSyqMrQvtIaViMiFL",
	"Y1I9GY108cuZTu/OVVY7SatdwauPUxKSe1Aaay1ycT4+HyPEUhA05WRCfj0fn1/irZBZolqjJdDYLL/j",
	"NQmgNNa41Kpncxp5i79fLSH6QqymrtLGvb+Mx+40rBV4ZAbqnkcQcB040njs/+aWWp1zb9E0jXmEfEaf",
	"tasNHWr3pfji6g+t2WQ+FQaUoHFgpQAVvMGbObtOZ0lC1apUKIhQI/vTKJYLjvxTqT0WwEsy4rwM2ryW",
	"bPVsujRuAzewhFeNfpM/J++8dfJYc5ZFEWhsgi9/jP9eUxaU1rBcL34E178FzcxSKv4d2ImB1WEPUZrk",
	"V5veKL1xRSPpES6N+8gBLSVaLseXP4Lte2mC32UmTg2hN2ACzQ0EiM8SqSOZV8/teXWj0ekpw7a0U91z",
	"bdMkllaAugELtIP8PIvj1YD7l4X7GRiEfFACvcJ+Wrtb80K/+gjfE+q3v/I/FfA5mYAyNiD+RSP+FWNB",
	"gewtrI8ey0uHtQNRDAa2kX+N/18Hf1cAOooDBF8yBB16KhTaRlbRBAwojVcoto/D5rb4fDqpLsPIZv4L",
	"a0Lv+yx9G5I082Ty2hROT6ncM+dzbC7Pb8CHUHrBoWRh1Z7Oqy9Me+oXt7DvIqYxSncs+nHmZqhnhnqm",
	"qmccJlrCoFsr6/ty1F9Lu+s71dDaDoFxdGvbCIwdPa6LkMfmJ8juHUB1fByWvYdmYIBpsxkoUvgBLUH1",
	"wbzXvqDPEqntucHz1EhDnzBEWb1PqJdJspw99lZEVzhu5SYq+4H+5uj3UyGPRIJ8POxlQ/2EYOfwEwj4",
	"5oqPGuhGxYC3H3mNNyc9Yc/7ruU4ALq5tCHlnhgOracdAgOqA0ReA4mmmmBvbQ3rM4m9dYSeScsBkP9D",
	"QNrmTNYcVIfjI+/SelWHcjcgDL3WUAXmvZYsXsi0DSHtwtaz6JG/0RnGjwZgluNHLh3erYLpdbf+nx/Z",
	"85cZV+8ayHPjy8Qv0NcM1KqSSM7nGgypS8FgTrPY4At7z2v72vMzP8mYJ7yF4oUlSR/yt7rjfQxu+45n",
	"PcwVDoHtCeyULrjA6jOPNqx10vLpZFvk5Y8re4RtzmGA6wDXOlxzUJQgtQ3i28bL3NYmsbastx5x+2nj",
	"U1tERykw8DBMk5xih7is/OPIaFzvCpAmSfdqyL03Gt1fkPXt+r8AAAD//zm9sMT4SgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
